# TODO: volume short syntax to long
version: '3.9'
services:
  mysql:
    container_name: "${GOBEL_MYSQL_CONTAINER_NAME}"
    environment:
      - MYSQL_DATABASE=${GOBEL_MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${GOBEL_MYSQL_ROOT_PASSWORD}
    build:
        context: "./mysql"
        dockerfile: "Dockerfile"
        args:
          PLATFORM: "${PLATFORM}"
          GOBEL_MYSQL_IMAGE_NAME: "${GOBEL_MYSQL_IMAGE_NAME}"
          GOBEL_MYSQL_IMAGE_TAG: "${GOBEL_MYSQL_IMAGE_TAG}"
    ports:
      - "${GOBEL_MYSQL_HOST_PORT}:${GOBEL_MYSQL_CONTAINER_PORT}"
    volumes:
      - ./mysql/config/my.cnf:/etc/mysql/conf.d/my.cnf
      - mysql-data:/var/lib/mysql
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    healthcheck:
      # NOTE: Access authority is not considered because it is only necessary to check the startup. There is also a reason why you should avoid executing login information in a shell because it is insecure.
      test: mysqladmin ping -h 127.0.0.1
      interval: 30s
      timeout: 10s
      retries: 50
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_MYSQL_CONTAINER_NAME}
        ipv4_address: 10.10.10.10
  redis:
    container_name: "${GOBEL_REDIS_CONTAINER_NAME}"
    environment:
      - REDIS_PASSWORD=${GOBEL_REDIS_PASSWORD}
    build:
        context: "./redis"
        dockerfile: "Dockerfile"
        args:
          PLATFORM: "${PLATFORM}"
          GOBEL_REDIS_IMAGE_NAME: "${GOBEL_REDIS_IMAGE_NAME}"
          GOBEL_REDIS_IMAGE_TAG: "${GOBEL_REDIS_IMAGE_TAG}"
    ports:
      - "${GOBEL_REDIS_HOST_PORT}:${GOBEL_REDIS_CONTAINER_PORT}"
    volumes:
      - ./redis/data:/var/lib/redis
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 50
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_REDIS_CONTAINER_NAME}
        ipv4_address: 10.10.10.20
  redis-insight:
    container_name: "${GOBEL_REDIS_INSIGHT_CONTAINER_NAME}"
    build:
        context: "./redis-insight"
        dockerfile: "Dockerfile"
        args:
          PLATFORM: "${PLATFORM}"
          GOBEL_REDIS_INSIGHT_IMAGE_NAME: "${GOBEL_REDIS_INSIGHT_IMAGE_NAME}"
          GOBEL_REDIS_INSIGHT_IMAGE_TAG: "${GOBEL_REDIS_INSIGHT_IMAGE_TAG}"
    ports:
      - "${GOBEL_REDIS_INSIGHT_HOST_PORT}:${GOBEL_REDIS_INSIGHT_CONTAINER_PORT}"
    volumes:
      - ./redis-insight/data:/var/lib/redis-insight
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_REDIS_CONTAINER_NAME}
        ipv4_address: 10.10.10.30
  nginx:
    container_name: "${GOBEL_NGINX_CONTAINER_NAME}"
    environment:
      - GOBEL_NGINX_HOST_PORT=${GOBEL_NGINX_HOST_PORT}
      - GOBEL_NGINX_HOST_SSL_PORT=${GOBEL_NGINX_HOST_SSL_PORT}
      - GOBEL_NGINX_ADMIN_CLIENT_SERVER_NAME=${GOBEL_NGINX_ADMIN_CLIENT_SERVER_NAME}
      - GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME=${GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME}
      - GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME=${GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME}
      - GOBEL_NGINX_API_SERVER_NAME=${GOBEL_NGINX_API_SERVER_NAME}
      - GOBEL_NGINX_API_ACCESS_LOG_NAME=${GOBEL_NGINX_API_ACCESS_LOG_NAME}
      - GOBEL_NGINX_API_ERROR_LOG_NAME=${GOBEL_NGINX_API_ERROR_LOG_NAME}
      - GOBEL_API_CONTAINER_NAME=${GOBEL_API_CONTAINER_NAME}
      - GOBEL_API_CONTAINER_PORT=${GOBEL_API_CONTAINER_PORT}
      - GOBEL_NGINX_CLIENT_SERVER_NAME=${GOBEL_NGINX_CLIENT_SERVER_NAME}
      - GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME=${GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME}
      - GOBEL_NGINX_CLIENT_ERROR_LOG_NAME=${GOBEL_NGINX_CLIENT_ERROR_LOG_NAME}
      - GOBEL_CLIENT_CONTAINER_NAME=${GOBEL_CLIENT_CONTAINER_NAME}
      - GOBEL_CLIENT_CONTAINER_PORT=${GOBEL_CLIENT_CONTAINER_PORT}
      - GOBEL_PATH_TO_SSL_CERTIFICATE=${GOBEL_PATH_TO_SSL_CERTIFICATE}
      - GOBEL_PATH_TO_SSL_CERTIFICATE_KEY=${GOBEL_PATH_TO_SSL_CERTIFICATE_KEY}
    build:
        context: "./nginx"
        dockerfile: "Dockerfile"
        args:
          PLATFORM: "${PLATFORM}"
          VUE_APP_API_ENDPOINT: "${GOBEL_API_HTTP_API_SCHEME}://${GOBEL_NGINX_API_SERVER_NAME}"
          GOBEL_NGINX_IMAGE_NAME: "${GOBEL_NGINX_IMAGE_NAME}"
          GOBEL_NGINX_IMAGE_TAG: "${GOBEL_NGINX_IMAGE_TAG}"
          GOBEL_ADMIN_CLIENT_IMAGE_NAME: "${GOBEL_ADMIN_CLIENT_IMAGE_NAME}"
          GOBEL_ADMIN_CLIENT_IMAGE_TAG: "${GOBEL_ADMIN_CLIENT_IMAGE_TAG}"
          GOBEL_ADMIN_CLIENT_PATH_TO_DIST: "${GOBEL_ADMIN_CLIENT_PATH_TO_DIST}"
          GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME: ${GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME}
          GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME: ${GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME}
          GOBEL_NGINX_API_ACCESS_LOG_NAME: ${GOBEL_NGINX_API_ACCESS_LOG_NAME}
          GOBEL_NGINX_API_ERROR_LOG_NAME: ${GOBEL_NGINX_API_ERROR_LOG_NAME}
          GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME: ${GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME}
          GOBEL_NGINX_CLIENT_ERROR_LOG_NAME: ${GOBEL_NGINX_CLIENT_ERROR_LOG_NAME}
    volumes:
      - ./nginx/template:/etc/nginx/templates
      - ./nginx/certificates:/certificates
    ports:
      - "${GOBEL_NGINX_HOST_PORT}:${GOBEL_NGINX_CONTAINER_PORT}"
      - "${GOBEL_NGINX_HOST_SSL_PORT}:${GOBEL_NGINX_CONTAINER_SSL_PORT}"
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    depends_on:
      gobel-api:
        condition: service_healthy
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_NGINX_CONTAINER_NAME}
        ipv4_address: 10.10.10.40
  gobel-api:
    container_name: "${GOBEL_API_CONTAINER_NAME}"
    environment:
      - SERVER_PORT=${GOBEL_API_CONTAINER_PORT}
      - ALLOW_ORIGIN=${GOBEL_API_ALLOW_ORIGIN}
      - JWT_ACCESS_TOKEN_SECRET=${GOBEL_API_JWT_ACCESS_TOKEN_SECRET}
      - JWT_REFRESH_TOKEN_SECRET=${GOBEL_API_JWT_REFRESH_TOKEN_SECRET}
      - DB_DRIVER=${GOBEL_API_DB_DRIVER}
      - DB_USER=${GOBEL_API_DB_USER}
      - DB_PASSWORD=${GOBEL_API_DB_PASSWORD}
      - DB_HOST=${GOBEL_MYSQL_CONTAINER_NAME}
      - DB_PORT=${GOBEL_MYSQL_CONTAINER_PORT}
      - DB_DATABASE=${GOBEL_MYSQL_DATABASE}
      - REDIS_HOST=${GOBEL_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${GOBEL_REDIS_CONTAINER_PORT}
      - REDIS_PASSWORD=${GOBEL_REDIS_PASSWORD}
      - LOG_LEVEL=${GOBEL_API_LOG_LEVEL} # -4: Debug 0: Info 4: Warn 8: Error
    build:
      context: "./gobel-api"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_API_IMAGE_NAME: "${GOBEL_API_IMAGE_NAME}"
        GOBEL_API_IMAGE_TAG: "${GOBEL_API_IMAGE_TAG}"
    ports:
      - "${GOBEL_API_HOST_PORT}:${GOBEL_API_CONTAINER_PORT}"
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: curl -s http://localhost:${GOBEL_API_CONTAINER_PORT}/healthcheck >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_API_CONTAINER_NAME}
        ipv4_address: 10.10.10.50
  gobel-client:
    container_name: "${GOBEL_CLIENT_CONTAINER_NAME}"
    environment:
      - SERVER_PORT=${GOBEL_CLIENT_CONTAINER_PORT}
      - HTTP_API_SCHEME=http
      - HTTP_API_HOST=${GOBEL_API_CONTAINER_NAME}:${GOBEL_API_CONTAINER_PORT}
      - LOG_LEVEL=${GOBEL_CLIENT_LOG_LEVEL} # -4: Debug 0: Info 4: Warn 8: Error
    build:
      context: "./gobel-client"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_CLIENT_IMAGE_NAME: "${GOBEL_CLIENT_IMAGE_NAME}"
        GOBEL_CLIENT_IMAGE_TAG: "${GOBEL_CLIENT_IMAGE_TAG}"
    ports:
      - "${GOBEL_CLIENT_HOST_PORT}:${GOBEL_CLIENT_CONTAINER_PORT}"
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    depends_on:
      gobel-api:
        condition: service_healthy
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_CLIENT_CONTAINER_NAME}
        ipv4_address: 10.10.10.60
  loki:
    container_name: "${GOBEL_LOKI_CONTAINER_NAME}"
    environment:
      - HTTP_LISTEN_PORT=${GOBEL_LOKI_CONTAINER_PORT}
    build:
      context: "./loki"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_LOKI_IMAGE_NAME: "${GOBEL_LOKI_IMAGE_NAME}"
        GOBEL_LOKI_IMAGE_TAG: "${GOBEL_LOKI_IMAGE_TAG}"
    ports:
      - "${GOBEL_LOKI_HOST_PORT}:${GOBEL_LOKI_CONTAINER_PORT}"
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    volumes:
      - "./loki:/mnt/config"
    command: -config.file=/mnt/config/loki-config.yaml -config.expand-env=true
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_LOKI_CONTAINER_NAME}
        ipv4_address: 10.10.10.70
  promtail:
    container_name: "${GOBEL_PROMTAIL_CONTAINER_NAME}"
    environment:
      - HTTP_LISTEN_PORT=${GOBEL_PROMTAIL_CONTAINER_PORT}
      - CLIENT_URL=http://${GOBEL_LOKI_CONTAINER_NAME}:${GOBEL_LOKI_CONTAINER_PORT}/loki/api/v1/push
    build:
      context: "./promtail"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_PROMTAIL_IMAGE_NAME: "${GOBEL_PROMTAIL_IMAGE_NAME}"
        GOBEL_PROMTAIL_IMAGE_TAG: "${GOBEL_PROMTAIL_IMAGE_TAG}"
    ports:
      - "${GOBEL_PROMTAIL_HOST_PORT}:${GOBEL_PROMTAIL_CONTAINER_PORT}"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - "./promtail:/mnt/config"
    command: -config.file=/mnt/config/promtail-config.yaml -config.expand-env=true
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_PROMTAIL_CONTAINER_NAME}
        ipv4_address: 10.10.10.80
  grafana:
    container_name: "${GOBEL_GRAFANA_CONTAINER_NAME}"
    environment:
      - GF_SERVER_ROOT_URL=http://${GOBEL_SERVER_IP}:3000
      - GF_SECURITY_ADMIN_USER=${GOBEL_GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GOBEL_GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP="${GOBEL_GF_USERS_ALLOW_SIGN_UP}"
      - GF_USERS_ALLOW_ORG_CREATE="${GOBEL_GF_USERS_ALLOW_ORG_CREATE}"
      - DS_PROMETHEUS=${GOBEL_DS_PROMETHEUS}
      - PROMETHEUS_URL=http://${GOBEL_PROMETHEUS_CONTAINER_NAME}:${GOBEL_PROMETHEUS_CONTAINER_PORT}
      - LOKI_URL=http://${GOBEL_LOKI_CONTAINER_NAME}:${GOBEL_LOKI_CONTAINER_PORT}
      - MYSQL_HOST=${GOBEL_MYSQL_CONTAINER_NAME}:${GOBEL_MYSQL_HOST_PORT}
      - MYSQL_DATABASE=mysql
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${GOBEL_MYSQL_ROOT_PASSWORD}
    build:
      context: "./grafana"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_GRAFANA_IMAGE_NAME: "${GOBEL_GRAFANA_IMAGE_NAME}"
        GOBEL_GRAFANA_IMAGE_TAG: "${GOBEL_GRAFANA_IMAGE_TAG}"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - ${GOBEL_GRAFANA_HOST_PORT}:${GOBEL_GRAFANA_CONTAINER_PORT}
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_GRAFANA_CONTAINER_NAME}
        ipv4_address: 10.10.10.90
  # NOTE: This does not work on m1 Mac.
  # cf. https://github.com/google/cadvisor/issues/2763
  cadvisor:
    container_name: "${GOBEL_CADVISOR_CONTAINER_NAME}"
    build:
      context: "./cadvisor"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_CADVISOR_IMAGE_NAME: "${GOBEL_CADVISOR_IMAGE_NAME}"
        GOBEL_CADVISOR_IMAGE_TAG: "${GOBEL_CADVISOR_IMAGE_TAG}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    privileged: true
    ports:
      - ${GOBEL_CADVISOR_HOST_PORT}:${GOBEL_CADVISOR_CONTAINER_PORT}
    command:
      - '-port=${GOBEL_CADVISOR_CONTAINER_PORT}'
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_CADVISOR_CONTAINER_NAME}
        ipv4_address: 10.10.10.100
  prometheus:
    container_name: "${GOBEL_PROMETHEUS_CONTAINER_NAME}"
    environment:
      - GOBEL_PROMETHEUS_IMAGE_NAME=${GOBEL_PROMETHEUS_IMAGE_NAME}
      - GOBEL_PROMETHEUS_IMAGE_TAG=${GOBEL_PROMETHEUS_IMAGE_TAG}
      - GOBEL_PROMETHEUS_CONTAINER_NAME=${GOBEL_PROMETHEUS_CONTAINER_NAME}
      - GOBEL_PROMETHEUS_CONTAINER_PORT=${GOBEL_PROMETHEUS_CONTAINER_PORT}
      - GOBEL_CADVISOR_CONTAINER_NAME=${GOBEL_CADVISOR_CONTAINER_NAME}
      - GOBEL_CADVISOR_CONTAINER_PORT=${GOBEL_CADVISOR_CONTAINER_PORT}
      - GOBEL_NODE_EXPORTER_CONTAINER_NAME=${GOBEL_NODE_EXPORTER_CONTAINER_NAME}
      - GOBEL_NODE_EXPORTER_CONTAINER_PORT=${GOBEL_NODE_EXPORTER_CONTAINER_PORT}
      - GOBEL_MYSQLD_EXPORTER_CONTAINER_NAME=${GOBEL_MYSQLD_EXPORTER_CONTAINER_NAME}
      - GOBEL_MYSQLD_EXPORTER_CONTAINER_PORT=${GOBEL_MYSQLD_EXPORTER_CONTAINER_PORT}
      - GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_NAME=${GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_NAME}
      - GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_PORT=${GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_PORT}
      - GOBEL_REDIS_EXPORTER_CONTAINER_NAME=${GOBEL_REDIS_EXPORTER_CONTAINER_NAME}
      - GOBEL_REDIS_EXPORTER_CONTAINER_PORT=${GOBEL_REDIS_EXPORTER_CONTAINER_PORT}
      - GOBEL_BLACKBOX_EXPORTER_CONTAINER_NAME=${GOBEL_BLACKBOX_EXPORTER_CONTAINER_NAME}
      - GOBEL_BLACKBOX_EXPORTER_CONTAINER_PORT=${GOBEL_BLACKBOX_EXPORTER_CONTAINER_PORT}
      - GOBEL_BLACKBOX_EXPORTER_TARGET_GOBEL_API=${GOBEL_HEALTHCHECK_ENDPOINT_GOBEL_API}
      - GOBEL_BLACKBOX_EXPORTER_TARGET_GOBEL_ADMIN=${GOBEL_HEALTHCHECK_ENDPOINT_GOBEL_ADMIN}
      - GOBEL_BLACKBOX_EXPORTER_TARGET_GOBEL_CLIENT=${GOBEL_HEALTHCHECK_ENDPOINT_GOBEL_CLIENT}
      - GOBEL_SSL_EXPORTER_CONTAINER_NAME=${GOBEL_SSL_EXPORTER_CONTAINER_NAME}
      - GOBEL_SSL_EXPORTER_CONTAINER_PORT=${GOBEL_SSL_EXPORTER_CONTAINER_PORT}
      - GOBEL_SSL_EXPORTER_TARGET_GOBEL_API=${GOBEL_SSL_ENDPOINT_GOBEL_API}
      - GOBEL_SSL_EXPORTER_TARGET_GOBEL_ADMIN=${GOBEL_SSL_ENDPOINT_GOBEL_ADMIN}
      - GOBEL_SSL_EXPORTER_TARGET_GOBEL_CLIENT=${GOBEL_SSL_ENDPOINT_GOBEL_CLIENT}
    build:
      context: "./prometheus"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_PROMETHEUS_IMAGE_NAME: "${GOBEL_PROMETHEUS_IMAGE_NAME}"
        GOBEL_PROMETHEUS_IMAGE_TAG: "${GOBEL_PROMETHEUS_IMAGE_TAG}"
        GOBEL_ALPINE_IMAGE_NAME: "${GOBEL_ALPINE_IMAGE_NAME}"
        GOBEL_ALPINE_IMAGE_TAG: "${GOBEL_ALPINE_IMAGE_TAG}"
    ports:
      - ${GOBEL_PROMETHEUS_HOST_PORT}:${GOBEL_PROMETHEUS_CONTAINER_PORT}
    command:
      - /bin/sh
      - -c
      - |
        envsubst < /template/prometheus.yml.template > /etc/prometheus/prometheus.yml
        /bin/prometheus \
        --config.file=/etc/prometheus/prometheus.yml \
        --storage.tsdb.path=/prometheus
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_PROMTAIL_CONTAINER_NAME}
        ipv4_address: 10.10.10.110
  node-exporter:
    container_name: "${GOBEL_NODE_EXPORTER_CONTAINER_NAME}"
    environment:
      - GOBEL_NODE_EXPORTER_IMAGE_NAME=${GOBEL_NODE_EXPORTER_IMAGE_NAME}
      - GOBEL_NODE_EXPORTER_IMAGE_TAG=${GOBEL_NODE_EXPORTER_IMAGE_TAG}
    build:
      context: "./node-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_NODE_EXPORTER_IMAGE_NAME: "${GOBEL_NODE_EXPORTER_IMAGE_NAME}"
        GOBEL_NODE_EXPORTER_IMAGE_TAG: "${GOBEL_NODE_EXPORTER_IMAGE_TAG}"
    volumes:
      - /proc:/host/proc
      - /sys:/host/sys
      - /:/rootfs
    ports:
      - ${GOBEL_NODE_EXPORTER_HOST_PORT}:${GOBEL_NODE_EXPORTER_CONTAINER_PORT}
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_NODE_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.120
  mysqld-exporter:
    container_name: "${GOBEL_MYSQLD_EXPORTER_CONTAINER_NAME}"
    environment:
      - DATA_SOURCE_NAME=root:${GOBEL_MYSQL_ROOT_PASSWORD}@(${GOBEL_MYSQL_CONTAINER_NAME}:${GOBEL_MYSQL_CONTAINER_PORT})/
    build:
      context: "./mysqld-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_MYSQLD_EXPORTER_IMAGE_NAME: "${GOBEL_MYSQLD_EXPORTER_IMAGE_NAME}"
        GOBEL_MYSQLD_EXPORTER_IMAGE_TAG: "${GOBEL_MYSQLD_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_MYSQLD_EXPORTER_HOST_PORT}:${GOBEL_MYSQLD_EXPORTER_CONTAINER_PORT}
    command:
      - --collect.global_status
      - --collect.global_variables
      - --collect.slave_status
      - --collect.binlog_size
      - --collect.info_schema.processlist
      - --collect.info_schema.userstats
      - --collect.info_schema.tables
      - --collect.auto_increment.columns
      - --collect.info_schema.tablestats
      - --collect.perf_schema.file_events
      - --collect.perf_schema.eventsstatements
      - --collect.perf_schema.indexiowaits
      - --collect.perf_schema.tableiowaits
      - --collect.perf_schema.tablelocks
      - --collect.perf_schema.eventswaits
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_MYSQLD_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.130
  nginx-prometheus-exporter:
    container_name: "${GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_NAME}"
    build:
      context: "./nginx-prometheus-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_NGINX_PROMETHEUS_EXPORTER_IMAGE_NAME: "${GOBEL_NGINX_PROMETHEUS_EXPORTER_IMAGE_NAME}"
        GOBEL_NGINX_PROMETHEUS_EXPORTER_IMAGE_TAG: "${GOBEL_NGINX_PROMETHEUS_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_NGINX_PROMETHEUS_EXPORTER_HOST_PORT}:${GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_PORT}
    command:
      - -nginx.scrape-uri=http://10.10.10.40:${GOBEL_NGINX_CONTAINER_PORT}/stub_status
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_NGINX_PROMETHEUS_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.140
  redis-exporter:
    container_name: "${GOBEL_REDIS_EXPORTER_CONTAINER_NAME}"
    build:
      context: "./redis-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_REDIS_EXPORTER_IMAGE_NAME: "${GOBEL_REDIS_EXPORTER_IMAGE_NAME}"
        GOBEL_REDIS_EXPORTER_IMAGE_TAG: "${GOBEL_REDIS_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_REDIS_EXPORTER_HOST_PORT}:${GOBEL_REDIS_EXPORTER_CONTAINER_PORT}
    command:
      - -redis.addr=redis://${GOBEL_REDIS_CONTAINER_NAME}:${GOBEL_REDIS_CONTAINER_PORT}
      - -redis.password=${GOBEL_REDIS_PASSWORD}
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_REDIS_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.150
  blackbox-exporter:
    container_name: "${GOBEL_BLACKBOX_EXPORTER_CONTAINER_NAME}"
    build:
      context: "./blackbox-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_BLACKBOX_EXPORTER_IMAGE_NAME: "${GOBEL_BLACKBOX_EXPORTER_IMAGE_NAME}"
        GOBEL_BLACKBOX_EXPORTER_IMAGE_TAG: "${GOBEL_BLACKBOX_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_BLACKBOX_EXPORTER_HOST_PORT}:${GOBEL_BLACKBOX_EXPORTER_CONTAINER_PORT}
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_BLACKBOX_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.160
  ssl-exporter:
    container_name: "${GOBEL_SSL_EXPORTER_CONTAINER_NAME}"
    build:
      context: "./ssl-exporter"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_SSL_EXPORTER_IMAGE_NAME: "${GOBEL_SSL_EXPORTER_IMAGE_NAME}"
        GOBEL_SSL_EXPORTER_IMAGE_TAG: "${GOBEL_SSL_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_SSL_EXPORTER_HOST_PORT}:${GOBEL_SSL_EXPORTER_CONTAINER_PORT}
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_SSL_EXPORTER_CONTAINER_NAME}
        ipv4_address: 10.10.10.170
  pyroscope:
    container_name: "${GOBEL_PYROSCOPE_CONTAINER_NAME}"
    environment:
      - GOBEL_API_CONTAINER_NAME=${GOBEL_API_CONTAINER_NAME}
      - GOBEL_API_CONTAINER_PORT=${GOBEL_API_CONTAINER_PORT}
      - GOBEL_CLIENT_CONTAINER_NAME=${GOBEL_CLIENT_CONTAINER_NAME}
      - GOBEL_CLIENT_CONTAINER_PORT=${GOBEL_CLIENT_CONTAINER_PORT}
      - GOBEL_PYROSCOPE_ADMIN_USER=${GOBEL_PYROSCOPE_ADMIN_USER}
      - GOBEL_PYROSCOPE_ADMIN_PASSWORD=${GOBEL_PYROSCOPE_ADMIN_PASSWORD}
    build:
      context: "./pyroscope"
      dockerfile: "Dockerfile"
      args:
        PLATFORM: "${PLATFORM}"
        GOBEL_PYROSCOPE_IMAGE_NAME: "${GOBEL_PYROSCOPE_IMAGE_NAME}"
        GOBEL_PYROSCOPE_IMAGE_TAG: "${GOBEL_PYROSCOPE_IMAGE_TAG}"
    volumes:
      - ./pyroscope/server.yml:/etc/pyroscope/server.yml
    ports:
      - ${GOBEL_PYROSCOPE_HOST_PORT}:${GOBEL_PYROSCOPE_CONTAINER_PORT}
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        max-size: "10m"
        max-file: "3"
    networks:
      gobel_network:
        aliases:
          - ${GOBEL_PYROSCOPE_CONTAINER_NAME}
        ipv4_address: 10.10.10.180
networks:
  gobel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.10.0/24
volumes:
  mysql-data:
  grafana-data: