version: '3.2'
services:
  mysql:
    container_name: "${GOBEL_MYSQL_CONTAINER_NAME}"
    environment: 
      - MYSQL_DATABASE=${GOBEL_MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${GOBEL_MYSQL_ROOT_PASSWORD}
      - GOBEL_MYSQL_SLOW_LOG_NAME=${GOBEL_MYSQL_SLOW_LOG_NAME}
      - GOBEL_MYSQL_ERROR_LOG_NAME=${GOBEL_MYSQL_ERROR_LOG_NAME}
    build:
        context: "./mysql"
        dockerfile: "Dockerfile"
        args:
          GOBEL_MYSQL_IMAGE_NAME: "${GOBEL_MYSQL_IMAGE_NAME}"
          GOBEL_MYSQL_IMAGE_TAG: "${GOBEL_MYSQL_IMAGE_TAG}"
    ports:
      - "${GOBEL_MYSQL_HOST_PORT}:${GOBEL_MYSQL_CONTAINER_PORT}"
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    user: 1000:1000
    networks:
      - gobel_link
    restart: always
    depends_on:
      - fluentd
  redis:
    container_name: "${GOBEL_REDIS_CONTAINER_NAME}"
    environment: 
      - REDIS_PASSWORD=${GOBEL_REDIS_PASSWORD}
    build:
        context: "./redis"
        dockerfile: "Dockerfile"
        args:
          GOBEL_REDIS_IMAGE_NAME: "${GOBEL_REDIS_IMAGE_NAME}"
          GOBEL_REDIS_IMAGE_TAG: "${GOBEL_REDIS_IMAGE_TAG}"
    ports:
      - "${GOBEL_REDIS_HOST_PORT}:${GOBEL_REDIS_CONTAINER_PORT}"
    volumes:
      - ./redis/data:/var/lib/redis
    networks:
      - gobel_link
    restart: always
    depends_on:
      - fluentd
  redis-insight:
    container_name: "${GOBEL_REDIS_INSIGHT_CONTAINER_NAME}"
    build:
        context: "./redis-insight"
        dockerfile: "Dockerfile"
        args:
          GOBEL_REDIS_INSIGHT_IMAGE_NAME: "${GOBEL_REDIS_INSIGHT_IMAGE_NAME}"
          GOBEL_REDIS_INSIGHT_IMAGE_TAG: "${GOBEL_REDIS_INSIGHT_IMAGE_TAG}"
    ports:
      - "${GOBEL_REDIS_INSIGHT_HOST_PORT}:${GOBEL_REDIS_INSIGHT_CONTAINER_PORT}"
    volumes:
      - ./redis-insight/data:/var/lib/redis-insight
    networks:
      - gobel_link
    restart: always
    depends_on:
      - fluentd
  nginx:
    container_name: "${GOBEL_NGINX_CONTAINER_NAME}"
    build:
        context: "./nginx"
        dockerfile: "Dockerfile"
        args:
          GOBEL_NGINX_IMAGE_NAME: "${GOBEL_NGINX_IMAGE_NAME}"
          GOBEL_NGINX_IMAGE_TAG: "${GOBEL_NGINX_IMAGE_TAG}"
          VUE_APP_API_ENDPOINT: "${GOBEL_NGINX_VUE_APP_API_ENDPOINT}"
          GOBEL_ADMIN_CLIENT_IMAGE_NAME: "${GOBEL_ADMIN_CLIENT_IMAGE_NAME}"
          GOBEL_ADMIN_CLIENT_IMAGE_TAG: "${GOBEL_ADMIN_CLIENT_IMAGE_TAG}"
          GOBEL_ADMIN_CLIENT_PATH_TO_DIST: "${GOBEL_ADMIN_CLIENT_PATH_TO_DIST}"
          GOBEL_NGINX_IMAGE_NAME: "${GOBEL_NGINX_IMAGE_NAME}"
          GOBEL_NGINX_IMAGE_TAG: "${GOBEL_NGINX_IMAGE_TAG}"
          GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME: ${GOBEL_NGINX_ADMIN_CLIENT_ACCESS_LOG_NAME}
          GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME: ${GOBEL_NGINX_ADMIN_CLIENT_ERROR_LOG_NAME}
          GOBEL_NGINX_API_ACCESS_LOG_NAME: ${GOBEL_NGINX_API_ACCESS_LOG_NAME}
          GOBEL_NGINX_API_ERROR_LOG_NAME: ${GOBEL_NGINX_API_ERROR_LOG_NAME}
          GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME: ${GOBEL_NGINX_CLIENT_ACCESS_LOG_NAME}
          GOBEL_NGINX_CLIENT_ERROR_LOG_NAME: ${GOBEL_NGINX_CLIENT_ERROR_LOG_NAME}
    ports:
      - "${GOBEL_NGINX_HOST_PORT}:${GOBEL_NGINX_CONTAINER_PORT}"
    networks:
      - gobel_link
    restart: always
    logging:
      driver: "fluentd"
      options:
        fluentd-address: ${GOBEL_FLUENTD_ADDRESS}
        fluentd-async-connect: "true"
        tag: "gobel.nginx"
    depends_on:
      - fluentd
  gobel-api:
    container_name: "${GOBEL_API_CONTAINER_NAME}"
    environment: 
      - SERVER_PORT=${GOBEL_API_CONTAINER_PORT}
      - TIME_ZONE=${GOBEL_API_TIME_ZONE}
      - ALLOW_ORIGIN=${GOBEL_API_ALLOW_ORIGIN}
      - DB_DRIVER=${GOBEL_API_DB_DRIVER}
      - DB_USER=${GOBEL_API_DB_USER}
      - DB_PASSWORD=${GOBEL_MYSQL_ROOT_PASSWORD}
      - DB_HOST=${GOBEL_MYSQL_CONTAINER_NAME}
      - DB_PORT=${GOBEL_MYSQL_CONTAINER_PORT}
      - DB_DATABASE=${GOBEL_MYSQL_DATABASE}
      - REDIS_HOST=${GOBEL_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${GOBEL_REDIS_CONTAINER_PORT}
      - REDIS_PASSWORD=${GOBEL_REDIS_PASSWORD}
      - LOG_THRESHOLD=${GOBEL_API_LOG_THRESHOLD} # NOTE: 0:info 1:warn 2:error 3:fatal
      - LOG_TIME_ZONE_OFFSET=${GOBEL_API_LOG_TIMEZONE_OFFSET}
    build:
      context: "./gobel-api"
      dockerfile: "Dockerfile"
      args:
        GOBEL_API_IMAGE_NAME: "${GOBEL_API_IMAGE_NAME}"
        GOBEL_API_IMAGE_TAG: "${GOBEL_API_IMAGE_TAG}"
    ports:
      - "${GOBEL_API_HOST_PORT}:${GOBEL_API_CONTAINER_PORT}"
    networks: 
      - gobel_link
    restart: always
    logging:
      driver: "fluentd"
      options:
        fluentd-address: ${GOBEL_FLUENTD_ADDRESS}
        fluentd-async-connect: "true"
        tag: "${GOBEL_API_LOGGING_TAG}"
    depends_on:
      - nginx
      - mysql
      - fluentd
  gobel-client-example:
    container_name: "${GOBEL_CLIENt_CONTAINER_NAME}"
    environment: 
      - SERVER_PORT=${GOBEL_CLIENT_CONTAINER_PORT}
      - TIME_ZONE=${GOBEL_CLIENT_TIME_ZONE}
      - HTTP_API_SCHEME=${GOBEL_API_HTTP_API_SCHEME} # NOTE: http or https
      - HTTP_API_HOST=${GOBEL_API_CONTAINER_NAME}:${GOBEL_API_CONTAINER_PORT}
      - LOG_THRESHOLD=${GOBEL_CLIENT_LOG_THRESHOLD} # NOTE: 0:info 1:warn 2:error 3:fatal
      - LOG_TIME_ZONE_OFFSET=${GOBEL_CLIENT_LOG_TIME_ZONE_OFFSET}
    build:
      context: "./gobel-client-example"
      dockerfile: "Dockerfile"
      args:
        GOBEL_CLIENT_IMAGE_NAME: "${GOBEL_CLIENT_IMAGE_NAME}"
        GOBEL_CLIENT_IMAGE_TAG: "${GOBEL_CLIENT_IMAGE_TAG}"
    ports:
      - "${GOBEL_CLIENT_HOST_PORT}:${GOBEL_CLIENT_CONTAINER_PORT}"
    networks:
      - gobel_link
    restart: always
    logging:
      driver: "fluentd"
      options:
        fluentd-address: ${GOBEL_FLUENTD_ADDRESS}
        fluentd-async-connect: "true"
        tag: "${GOBEL_CLIENT_LOGGING_TAG}"
    depends_on:
      - nginx
      - mysql
      - fluentd
  prometheus:
    container_name: "${GOBEL_PROMETHEUS_CONTAINER_NAME}"
    environment: 
      GOBEL_PROMETHEUS_IMAGE_NAME=${GOBEL_PROMETHEUS_IMAGE_NAME}
      GOBEL_PROMETHEUS_IMAGE_TAG=${GOBEL_PROMETHEUS_IMAGE_TAG}
      GOBEL_PROMETHEUS_CONTAINER_NAME=${GOBEL_PROMETHEUS_CONTAINER_NAME}
      GOBEL_PROMETHEUS_CONTAINER_PORT=${GOBEL_PROMETHEUS_CONTAINER_PORT}
      GOBEL_CADVISOR_CONTAINER_NAME=${GOBEL_CADVISOR_CONTAINER_NAME}
      GOBEL_CADVISOR_CONTAINER_PORT=${GOBEL_CADVISOR_CONTAINER_PORT}
      GOBEL_NODE_EXPORTER_CONTAINER_NAME=${GOBEL_NODE_EXPORTER_CONTAINER_NAME}
      GOBEL_NODE_EXPORTER_CONTAINER_PORT=${GOBEL_NODE_EXPORTER_CONTAINER_PORT}
      GOBEL_MYSQL_EXPORTER_CONTAINER_NAME=${GOBEL_MYSQL_EXPORTER_CONTAINER_NAME}
      GOBEL_MYSQL_EXPORTER_CONTAINER_PORT=${GOBEL_MYSQL_EXPORTER_CONTAINER_PORT}
    build:
      context: "./prometheus"
      dockerfile: "Dockerfile"
      args:
        GOBEL_PROMETHEUS_IMAGE_NAME: "${GOBEL_PROMETHEUS_IMAGE_NAME}"
        GOBEL_PROMETHEUS_IMAGE_TAG: "${GOBEL_PROMETHEUS_IMAGE_TAG}"
    ports: 
      - ${GOBEL_PROMETHEUS_HOST_PORT}:${GOBEL_PROMETHEUS_CONTAINER_PORT}
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    networks: 
      - gobel_link
    restart: always
  node-exporter:
    container_name: "${GOBEL_NODE_EXPORTER_CONTAINER_NAME}"
    environment: 
      GOBEL_NODE_EXPORTER_IMAGE_NAME=${GOBEL_NODE_EXPORTER_IMAGE_NAME}
      GOBEL_NODE_EXPORTER_IMAGE_TAG=${GOBEL_NODE_EXPORTER_IMAGE_TAG}
    build:
      context: "./node-exporter"
      dockerfile: "Dockerfile"
      args:
        GOBEL_NODE_EXPORTER_IMAGE_NAME: "${GOBEL_NODE_EXPORTER_IMAGE_NAME}"
        GOBEL_NODE_EXPORTER_IMAGE_TAG: "${GOBEL_NODE_EXPORTER_IMAGE_TAG}"
    volumes:
      - /proc:/host/proc
      - /sys:/host/sys
      - /:/rootfs
    ports:
      - ${GOBEL_NODE_EXPORTER_HOST_PORT}:${GOBEL_NODE_EXPORTER_CONTAINER_PORT}
    command: 
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    networks: 
      - gobel_link
    restart: always
  mysqld-exporter:
    container_name: "${GOBEL_MYSQLD_EXPORTER_CONTAINER_NAME}"
    environment: 
      - DATA_SOURCE_NAME=root:${GOBEL_MYSQL_ROOT_PASSWORD}@(${GOBEL_MYSQL_CONTAINER_NAME:${GOBEL_MYSQL_CONTAINER_PORT}})
    build:
      context: "./mysqld-exporter"
      dockerfile: "Dockerfile"
      args:
        GOBEL_MYSQLD_EXPORTER_IMAGE_NAME: "${GOBEL_MYSQLD_EXPORTER_IMAGE_NAME}"
        GOBEL_MYSQLD_EXPORTER_IMAGE_TAG: "${GOBEL_MYSQLD_EXPORTER_IMAGE_TAG}"
    ports:
      - ${GOBEL_MYSQL_EXPORTER_HOST_PORT}:${GOBEL_MYSQL_EXPORTER_CONTAINER_PORT}
    command: 
      - --collect.global_status
      - --collect.global_variables
      - --collect.slave_status
      - --collect.binlog_size
      - --collect.info_schema.processlist
      - --collect.info_schema.userstats
      - --collect.info_schema.tables
      - --collect.auto_increment.columns
      - --collect.info_schema.tablestats
      - --collect.perf_schema.file_events
      - --collect.perf_schema.eventsstatements
      - --collect.perf_schema.indexiowaits
      - --collect.perf_schema.tableiowaits
      - --collect.perf_schema.tablelocks
      - --collect.perf_schema.eventswaits
    networks: 
      - gobel_link
    restart: always
  grafana:
    container_name: "${GOBEL_GRAFANA_CONTAINER_NAME}"
    environment: 
      - GF_SECURITY_ADMIN_USER=${GOBEL_GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_PASSWORD=${GOBEL_GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP="${GOBEL_GF_USERS_ALLOW_SIGN_UP}"
      - GF_USERS_ALLOW_ORG_CREATE="${GOBEL_GF_USERS_ALLOW_ORG_CREATE}"
      - DS_PROMETHEUS=${GOBEL_DS_PROMETHEUS}
    build:
      context: "./grafana"
      dockerfile: "Dockerfile"
      args:
        GOBEL_GRAFANA_IMAGE_NAME: "${GOBEL_GRAFANA_IMAGE_NAME}"
        GOBEL_GRAFANA_IMAGE_TAG: "${GOBEL_GRAFANA_IMAGE_TAG}"
    volumes: 
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - ${GOBEL_GRAFANA_HOST_PORT}:${GOBEL_GRAFANA_CONTAINER_PORT}
    networks: 
      - gobel_link
    restart: always
  # NOTE: This does not work on m1 Mac.
  # cf. https://github.com/google/cadvisor/issues/2763
  cadvisor:
    container_name: "${GOBEL_CADVISOR_CONTAINER_NAME}"
    build:
      context: "./cadvisor"
      dockerfile: "Dockerfile"
      args:
        GOBEL_CADVISOR_IMAGE_NAME: "${GOBEL_CADVISOR_IMAGE_NAME}"
        GOBEL_CADVISOR_IMAGE_TAG: "${GOBEL_CADVISOR_IMAGE_TAG}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    privileged: true
    ports:
      - ${GOBEL_CADVISOR_HOST_PORT}:${GOBEL_CADVISOR_CONTAINER_PORT}
    command:
      - '-port=${GOBEL_CADVISOR_CONTAINER_PORT}'
    networks: 
      - gobel_link
    restart: always
  elasticsearch:  
    container_name: "${GOBEL_ELASICSEARCH_CONTAINER_NAME}"
    environment: 
      - ELASTIC_USERNAME=${GOBEL_ELASTICSEARCH_ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${GOBEL_ELASTICSEARCH_ELASTIC_PASSWORD}
    build: 
      context: "./elasticsearch"
      dockerfile: "Dockerfile"
      args:
        GOBEL_ELASTICSEARCH_IMAGE_NAME: "${GOBEL_ELASTICSEARCH_IMAGE_NAME}"
        GOBEL_ELASTICSEARCH_IMAGE_TAG: "${GOBEL_ELASTICSEARCH_IMAGE_TAG}"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/user/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch:/usr/share/elasticsearch/data
    env_file: ./elasticsearch/.env
    ports:
      - ${GOBEL_ELASTICSEARCH_HOST_PORT}:${GOBEL_ELASTICSEARCH_CONTAINER_PORT}
    networks: 
      - gobel_link
    restart: always
  fluentd:
    container_name: "${GOBEL_FLUENTD_CONTAINER_NAME}"
    build:
      context: "./fluentd"
      dockerfile: "Dockerfile"
      args:
        GOBEL_FLUENTD_IMAGE_NAME: "${GOBEL_FLUENTD_IMAGE_NAME}"
        GOBEL_FLUENTD_IMAGE_TAG: "${GOBEL_FLUENTD_IMAGE_TAG}"
        GOBEL_ELASTICSEARCH_CONTAINER_PORT: "${GOBEL_ELASTICSEARCH_CONTAINER_PORT}"
    environment: 
      - GOBEL_FLUENTD_CONTAINER_PORT=${GOBEL_FLUENTD_CONTAINER_PORT}
      - GOBEL_ELASTICSEARCH_ELASTIC_USERNAME=${GOBEL_ELASTICSEARCH_ELASTIC_USERNAME}
      - GOBEL_ELASICSEARCH_ELASTIC_PASSWORD=${GOBEL_ELASTICSEARCH_ELASTIC_PASSWORD}
      - GOBEL_MYSQL_SLOW_LOG_NAME=${GOBEL_MYSQL_SLOW_LOG_NAME}
      - GOBEL_FLUENTD_LOGSTASH_PREFIX_NGINX_ACCESS_LOG=${GOBEL_FLUENTD_LOGSTASH_PREFIX_NGINX_ACCESS_LOG}
      - GOBEL_FLUENTD_TYPE_NAME_NGINX_ACCESS_LOG=${GOBEL_FLUENTD_TYPE_NAME_NGINX_ACCESS_LOG}
      - GOBEL_FLUENTD_LOGSTASH_PREFIX_NGINX_ERROR_LOG=${GOBEL_FLUENTD_LOGSTASH_PREFIX_NGINX_ERROR_LOG}
      - GOBEL_FLUENTD_TYPE_NAME_NGINX_ERROR_LOG=${GOBEL_FLUENTD_TYPE_NAME_NGINX_ERROR_LOG}
      - GOBEL_FLUENTD_LOGSTASH_PREFIX_GOBEL_API=${GOBEL_FLUENT_LOGSTASH_PREFIX_GOBEL_API}
      - GOBEL_FLUENTD_TYPE_NAME_GOBEL_API=${GOBEL_FLUENT_TYPE_NAME_GOBEL_API}
      - GOBEL_FLUENTD_LOGSTASH_PREFIX_GOBEL_CLIENT=${GOBEL_FLUENT_LOGSTASH_PREFIX_GOBEL_CLIENT}
      - GOBEL_FLUENTD_TYPE_NAME_GOBEL_CLIENT=${GOBEL_FLUENT_TYPE_NAME_GOBEL_CLIENT}
      - GOBEL_FLUENTD_LOGSTASH_PREFIX_MYSQL_SLOW=${GOBEL_FLUENT_LOGSTASH_PREFIX_MYSQL_SLOW}
      - GOBEL_FLUENTD_TYPE_NAME_MYSQL_SLOW=${GOBEL_FLUENT_TYPE_NAME_MYSQL_SLOW}
    volumes:
      - ./mysql/log:/var/log/mysql
    user: 1000:1000
    links:
      - "elasticsearch"
    ports:
      - ${GOBEL_FLUENTD_HOST_PORT}:${GOBEL_FLUENTD_CONTAINER_PORT}
      - ${GOBEL_FLUENTD_HOST_PORT}:${GOBEL_FLUENTD_CONTAINER_PORT}/udp
    networks: 
      - gobel_link
    restart: always
    depends_on:
      - elasticsearch
  kibana:
    container_name: "${GOBEL_KIBANA_CONTAINER_NAME}"
    environment: 
      - GOBEL_ELASTICSEARCH_CONTAINER_NAME=${GOBEL_ELASTICSEARCH_CONTAINER_NAME}
      - GOBEL_ELASTICSEARCH_CONTAINER_HOST=${GOBEL_ELASTICSEARCH_CONTAINER_HOST}
    build:
      context: "./kibana"
      dockerfile: "Dockerfile"
      args:
        GOBEL_KIBANA_IMAGE_NAME: "${GOBEL_KIBANA_IMAGE_NAME}"
        GOBEL_KIBANA_IMAGE_TAG: "${GOBEL_KIBANA_IMAGE_TAG}"
        GOBEL_ELASTICSEARCH_ELASTIC_USERNAME: "${GOBEL_ELASTICSEARCH_ELASTIC_USERNAME}"
        GOBEL_ELASTICSEARCH_ELASTIC_PASSWORD: "${GOBEL_ELASTICSEARCH_ELASTIC_PASSWORD}"
    ports:
      - ${GOBEL_KIBANA_IMAGE_NAME}:${GOBEL_KIBANA_IMAGE_TAG}
    networks: 
      - gobel_link
    restart: always
    depends_on:
      - elasticsearch
networks:
  gobel_link:
    external: true